import os
import re
from datetime import date
from pathlib import Path

from dotenv import load_dotenv
from openai import OpenAI

# === LOAD ENVIRONMENT VARIABLES ===
load_dotenv()

VAULT_PATH = Path(os.environ.get("MSBEE_VAULT_PATH", "."))
DAILY_NOTES_PATH = VAULT_PATH / os.environ.get("MSBEE_DAILY_PATH", "daily")
ROADMAP_PATH = VAULT_PATH / os.environ.get("MSBEE_ROADMAP_PATH", "msbee/roadmap.md")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

if not OPENAI_API_KEY:
raise ValueError("Missing OPENAI_API_KEY environment variable.")

client = OpenAI(api_key=OPENAI_API_KEY)

# === TASK + ROADMAP EXTRACTION ===

def extract_tasks():
tasks = []
for md in VAULT_PATH.rglob("*.md"):
if "Templates" in str(md):
continue
with open(md, "r", encoding="utf-8") as f:
lines = f.readlines()
for line in lines:
if line.strip().startswith("- [ ]"):
tasks.append(line.strip())
return tasks

def extract_roadmap():
if not ROADMAP_PATH.exists():
return "No roadmap found."
with open(ROADMAP_PATH, "r", encoding="utf-8") as f:
return f.read()

# === LLM QUERY ===

def ask_msbee(tasks, roadmap):
prompt = f"""You are MsBee, a gentle but clever assistant. 
Here are some open tasks:
{chr(10).join(tasks)}

And here's the user's high-level roadmap:
{roadmap}

Pick 2–3 tasks to suggest for today based on alignment with the roadmap. Write a motivational nudge, and a fun one-liner that could go on a lock screen.
Respond in Markdown like this:

## 🌟 Focus Tasks
- [ ] task 1
- [ ] task 2

## 🐝 Nudge
Your message here

## 🔒 Lock Screen Quote
"Your one-liner here"
"""
response = client.chat.completions.create(
model="gpt-4",
messages=[{"role": "user", "content": prompt}],
temperature=0.7,
)
return response.choices[0].message.content

# === DAILY NOTE UPDATE ===

def update_daily_note(content):
today = date.today().isoformat()
daily_note = DAILY_NOTES_PATH / f"{today}.md"
if not daily_note.exists():
print(f"Daily note not found: {daily_note}")
return

with open(daily_note, "r", encoding="utf-8") as f:
text = f.read()

# Replace or insert the MsBee section
if "## 🐝 MsBee" in text:
updated_text = re.sub(
r"## 🐝 MsBee[\s\S]*?(?=\n## |\Z)",
f"## 🐝 MsBee\n{content}",
text,
flags=re.MULTILINE
)
else:
updated_text = text.strip() + "\n\n## 🐝 MsBee\n" + content

with open(daily_note, "w", encoding="utf-8") as f:
f.write(updated_text)

print(f"MsBee section updated in: {daily_note}")

# === MAIN ===

if __name__ == "__main__":
tasks = extract_tasks()
roadmap = extract_roadmap()
reply = ask_msbee(tasks, roadmap)
update_daily_note(reply)
